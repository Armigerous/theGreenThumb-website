// GreenThumb Complete Database Schema
// Hybrid relational + document model with AI-powered features
//
// VALIDATION STRATEGY:
// - JSON fields: No Prisma @default support; handle empty objects in application code
// - Array size limits: Noted in comments (e.g., "Max 10 items") but must be enforced via:
//   1. Zod schemas in application layer (lib/schemas/)
//   2. PostgreSQL check constraints (for critical limits)
//   3. API middleware validation
// - Consider lookup tables or enums for high-cardinality attributes with strict limits

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ========================================
// CORE REFERENCE DATA
// ========================================

// Core plant table - essential information only
model Plant {
  id               Int      @id @default(autoincrement())
  slug             String   @unique
  scientificName   String   @map("scientific_name")
  commonNames      String[] @map("common_names")
  family           String?
  genus            String?
  species          String?
  cultivar         String?
  variety          String?
  
  // Basic plant information
  description      String?  // AI-rewritten, consistent description
  origin           String?
  distribution     String?
  
  // Essential environmental requirements (denormalized for performance)
  lightRequirements String[] @map("light_requirements") // Max 5 items
  waterNeeds       String[] @map("water_needs") // Max 5 items
  soilTypes        String[] @map("soil_types") // Max 8 items
  hardinessZones   String[] @map("hardiness_zones") // Max 10 items
  
  // Media
  images           PlantImage[]
  profileVideo     String?     @map("profile_video")
  soundFile        String?     @map("sound_file")
  
  // AI and data quality
  dataCompleteness Float    @default(0.0) @map("data_completeness") // 0-1 score
  lastAiUpdate     DateTime? @map("last_ai_update")
  aiConfidence     Float?   @map("ai_confidence")
  
  // Timestamps
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")
  
  // Relations
  userPlants       UserPlant[]
  recommendations  PlantRecommendation[]
  similarPlants    PlantSimilarity[] @relation("SimilarPlants")
  similarToPlants  PlantSimilarity[] @relation("SimilarToPlants")
  symbioticRelationships PlantSymbiosis[] @relation("PlantSymbiosis")
  symbioticWithPlants PlantSymbiosis[] @relation("SymbioticWithPlants")
  aestheticPairings PlantAestheticPairing[] @relation("PlantAestheticPairings")
  companionAestheticPairings PlantAestheticPairing[] @relation("CompanionAestheticPairings")
  healthIssues     PlantHealthIssue[]
  careTasks        PlantCareTask[]
  embeddings       PlantEmbedding[]
  identifications  PlantIdentification[]
  identificationFeedback PlantIdentificationFeedback[]
  communityPosts   CommunityPost[]
  
  // Modular sub-objects
  physicalTraits   PlantPhysicalTraits?
  environmentalRequirements PlantEnvironmentalRequirements?
  characteristics  PlantCharacteristics?
  careInstructions PlantCareInstructions?
  propagationInfo  PlantPropagationInfo?
  
  @@index([scientificName])
  @@index([family])
  @@index([genus])
  @@index([commonNames], type: Gin)
  @@index([lightRequirements], type: Gin)
  @@index([soilTypes], type: Gin)
  @@index([hardinessZones], type: Gin)
  @@index([dataCompleteness])
}

// Physical characteristics of the plant
model PlantPhysicalTraits {
  id                Int     @id @default(autoincrement())
  plantId           Int     @unique @map("plant_id")
  
  // Size information
  heightMin         Int?    @map("height_min") // cm
  heightMax         Int?    @map("height_max") // cm
  widthMin          Int?    @map("width_min")  // cm
  widthMax          Int?    @map("width_max")  // cm
  
  // Growth characteristics
  growthRate        String? @map("growth_rate") // "slow", "moderate", "fast"
  lifeSpan          String? @map("life_span")   // "annual", "perennial", "biennial"
  habit             String? // "upright", "spreading", "climbing", "prostrate"
  
  // Plant structure
  stemType          String? @map("stem_type") // "woody", "herbaceous", "succulent"
  rootType          String? @map("root_type") // "taproot", "fibrous", "shallow"
  
  // Timestamps
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  
  // Relations
  plant             Plant   @relation(fields: [plantId], references: [id], onDelete: Cascade)
  
  @@index([plantId])
  @@index([growthRate])
  @@index([lifeSpan])
}

// Detailed environmental requirements
model PlantEnvironmentalRequirements {
  id                Int     @id @default(autoincrement())
  plantId           Int     @unique @map("plant_id")
  
  // Soil requirements
  soilPh            Float[] @map("soil_ph") // pH range [min, max]
  soilDrainage      String[] @map("soil_drainage") // "well_drained", "poorly_drained"
  soilFertility     String? @map("soil_fertility") // "low", "moderate", "high"
  
  // Temperature requirements
  temperatureMin    Float?  @map("temperature_min") // Celsius
  temperatureMax    Float?  @map("temperature_max") // Celsius
  frostTolerance    String? @map("frost_tolerance") // "none", "light", "moderate", "heavy"
  
  // Humidity requirements
  humidityMin       Float?  @map("humidity_min")    // Percentage
  humidityMax       Float?  @map("humidity_max")    // Percentage
  humidityPreference String? @map("humidity_preference") // "low", "moderate", "high"
  
  // Wind and exposure
  windTolerance     String? @map("wind_tolerance") // "low", "moderate", "high"
  saltTolerance     String? @map("salt_tolerance") // "none", "low", "moderate", "high"
  
  // Timestamps
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  
  // Relations
  plant             Plant   @relation(fields: [plantId], references: [id], onDelete: Cascade)
  
  @@index([plantId])
  @@index([temperatureMin])
  @@index([temperatureMax])
}

// Plant characteristics (flower, foliage, wildlife, toxicity)
model PlantCharacteristics {
  id                Int     @id @default(autoincrement())
  plantId           Int     @unique @map("plant_id")
  
  // Flower characteristics
  flowerColor       String[] @map("flower_color") // Max 10 items
  flowerSize        String? @map("flower_size") // "small", "medium", "large"
  flowerShape       String? @map("flower_shape")
  bloomTime         String[] @map("bloom_time") // Max 4 items: "spring", "summer", "fall", "winter"
  bloomDuration     String? @map("bloom_duration") // "brief", "extended", "continuous"
  fragrance         String? // "none", "mild", "strong", "sweet", "spicy"
  
  // Foliage characteristics
  foliageColor      String[] @map("foliage_color") // Max 10 items
  foliageTexture    String? @map("foliage_texture") // "smooth", "rough", "hairy", "waxy"
  foliageShape      String? @map("foliage_shape") // "ovate", "lanceolate", "round", "needle"
  foliageSize       String? @map("foliage_size") // "small", "medium", "large"
  evergreen         Boolean? @default(false)
  deciduous         Boolean? @default(true)
  
  // Fruit/seed characteristics
  fruitColor        String[] @map("fruit_color") // Max 8 items
  fruitSize         String? @map("fruit_size")
  fruitEdible       Boolean? @map("fruit_edible") @default(false)
  seedSize          String? @map("seed_size") // "small", "medium", "large"
  
  // Wildlife interactions
  attractsBirds     Boolean? @map("attracts_birds") @default(false)
  attractsBees      Boolean? @map("attracts_bees") @default(false)
  attractsButterflies Boolean? @map("attracts_butterflies") @default(false)
  attractsHummingbirds Boolean? @map("attracts_hummingbirds") @default(false)
  
  // Resistance characteristics
  deerResistant     Boolean? @map("deer_resistant") @default(false)
  rabbitResistant   Boolean? @map("rabbit_resistant") @default(false)
  droughtResistant  Boolean? @map("drought_resistant") @default(false)
  diseaseResistant  String[] @map("disease_resistant") // Max 20 items. Array of diseases
  
  // Aesthetic characteristics
  aestheticStyle    String[] @map("aesthetic_style") // Max 5 items: "modern", "tropical", "minimalist", "bohemian", "scandinavian"
  colorScheme       String[] @map("color_scheme") // Max 3 items: "monochromatic", "complementary", "analogous", "triadic"
  primaryColors     String[] @map("primary_colors") // Max 5 items: "green", "variegated", "purple", "silver"
  textureProfile    String[] @map("texture_profile") // Max 5 items: "smooth", "textured", "glossy", "matte", "patterned"
  sizeCategory      String? @map("size_category") // "statement", "filler", "trailing", "upright"
  seasonalInterest  String[] @map("seasonal_interest") // Max 8 items: "spring_flowers", "summer_foliage", "fall_color", "winter_evergreen"
  
  // Toxicity information
  toxicToHumans     String? @map("toxic_to_humans") // "none", "mild", "moderate", "severe"
  toxicToPets       String? @map("toxic_to_pets") // "none", "mild", "moderate", "severe"
  toxicParts        String[] @map("toxic_parts") // Max 8 items: "leaves", "berries", "roots", "all"
  toxicityNotes     String? @map("toxicity_notes")
  
  // Timestamps
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  
  // Relations
  plant             Plant   @relation(fields: [plantId], references: [id], onDelete: Cascade)
  
  @@index([plantId])
  @@index([flowerColor], type: Gin)
  @@index([foliageColor], type: Gin)
  @@index([bloomTime], type: Gin)
  @@index([attractsBees])
  @@index([attractsButterflies])
  @@index([deerResistant])
  @@index([aestheticStyle], type: Gin)
  @@index([colorScheme], type: Gin)
  @@index([primaryColors], type: Gin)
  @@index([textureProfile], type: Gin)
  @@index([sizeCategory])
  @@index([seasonalInterest], type: Gin)
}

// Detailed care instructions
model PlantCareInstructions {
  id                Int     @id @default(autoincrement())
  plantId           Int     @unique @map("plant_id")
  
  // Watering instructions
  wateringFrequency String? @map("watering_frequency") // "daily", "weekly", "biweekly", "monthly"
  wateringAmount    String? @map("watering_amount") // "light", "moderate", "heavy"
  wateringMethod    String? @map("watering_method") // "overhead", "soil_level", "drip"
  winterWatering    String? @map("winter_watering") // "reduce", "stop", "same"
  
  // Fertilizing instructions
  fertilizingFrequency String? @map("fertilizing_frequency") // "monthly", "seasonal", "yearly"
  fertilizerType    String? @map("fertilizer_type") // "balanced", "high_nitrogen", "high_phosphorus"
  fertilizingSeason String? @map("fertilizing_season") // "spring", "summer", "fall", "all_year"
  
  // Pruning instructions
  pruningTime       String? @map("pruning_time") // "late_winter", "spring", "summer", "fall"
  pruningType       String? @map("pruning_type") // "light", "moderate", "heavy", "deadhead"
  pruningNotes      String? @map("pruning_notes")
  
  // Repotting/transplanting
  repottingFrequency String? @map("repotting_frequency") // "yearly", "biyearly", "when_needed"
  transplantingTime  String? @map("transplanting_time") // "spring", "fall", "dormant_season"
  
  // Special care requirements
  specialCare       String? @map("special_care")
  careNotes         String? @map("care_notes")
  
  // Timestamps
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  
  // Relations
  plant             Plant   @relation(fields: [plantId], references: [id], onDelete: Cascade)
  
  @@index([plantId])
  @@index([wateringFrequency])
  @@index([fertilizingFrequency])
}

// Propagation information
model PlantPropagationInfo {
  id                Int     @id @default(autoincrement())
  plantId           Int     @unique @map("plant_id")
  
  // Propagation methods
  propagationMethods String[] @map("propagation_methods") // "seeds", "cuttings", "division", "layering"
  propagationDifficulty String? @map("propagation_difficulty") // "easy", "moderate", "difficult"
  
  // Seed information
  seedGerminationTime String? @map("seed_germination_time") // "1_2_weeks", "2_4_weeks", "1_2_months"
  seedDepth          String? @map("seed_depth") // "surface", "shallow", "deep"
  seedSpacing        String? @map("seed_spacing") // "close", "moderate", "wide"
  seedStratification Boolean? @default(false) // Needs cold treatment
  
  // Cutting information
  cuttingType        String? @map("cutting_type") // "softwood", "hardwood", "semi_hardwood", "root"
  cuttingTime        String? @map("cutting_time") // "spring", "summer", "fall", "winter"
  rootingHormone     Boolean? @map("rooting_hormone") @default(false)
  
  // Division information
  divisionTime       String? @map("division_time") // "spring", "fall"
  divisionFrequency  String? @map("division_frequency") // "yearly", "biyearly", "when_needed"
  
  // Propagation instructions
  propagationInstructions Json? @map("propagation_instructions")
  
  // Timestamps
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  
  // Relations
  plant             Plant   @relation(fields: [plantId], references: [id], onDelete: Cascade)
  
  @@index([plantId])
  @@index([propagationMethods], type: Gin)
  @@index([propagationDifficulty])
}

model PlantImage {
  id          Int     @id @default(autoincrement())
  plantId     Int     @map("plant_id")
  url         String
  altText     String? @map("alt_text")
  caption     String?
  attribution String?
  isPrimary   Boolean @default(false) @map("is_primary")
  sortOrder   Int     @default(0) @map("sort_order")
  
  // Image metadata for AI processing
  imageType   String? @map("image_type") // "flower", "foliage", "fruit", "seed", "bark", "root"
  season      String? // "spring", "summer", "fall", "winter"
  healthStatus String? @map("health_status") // "healthy", "diseased", "pest_damage"
  
  plant       Plant   @relation(fields: [plantId], references: [id], onDelete: Cascade)
  
  @@index([plantId, isPrimary])
  @@index([plantId, sortOrder])
  @@index([imageType])
  @@index([healthStatus])
}

model PlantSimilarity {
  id              Int   @id @default(autoincrement())
  plantId         Int   @map("plant_id")
  similarPlantId  Int   @map("similar_plant_id")
  similarityScore Float @default(0.0) @map("similarity_score")
  similarityType  String @map("similarity_type") // "visual", "care", "habitat"
  
  plant           Plant @relation("SimilarPlants", fields: [plantId], references: [id], onDelete: Cascade)
  similarPlant    Plant @relation("SimilarToPlants", fields: [similarPlantId], references: [id], onDelete: Cascade)
  
  @@unique([plantId, similarPlantId])
  @@index([plantId])
  @@index([similarityScore])
  @@index([similarityType])
}

// ========================================
// SYMBIOTIC RELATIONSHIPS
// ========================================

model PlantSymbiosis {
  id                Int     @id @default(autoincrement())
  plantId           Int     @map("plant_id")
  symbioticPlantId  Int     @map("symbiotic_plant_id")
  
  // Relationship details
  relationshipType  SymbiosisType @map("relationship_type")
  benefitToPlant    String  @map("benefit_to_plant")
  benefitToSymbiotic String @map("benefit_to_symbiotic")
  distance          Int?    // Optimal distance in cm
  notes             String?
  
  // Scientific backing
  researchSource    String? @map("research_source")
  confidence        Float   @default(0.0) // 0-1 confidence score
  
  // Timestamps
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  
  // Relations
  plant             Plant   @relation("PlantSymbiosis", fields: [plantId], references: [id], onDelete: Cascade)
  symbioticPlant    Plant   @relation("SymbioticWithPlants", fields: [symbioticPlantId], references: [id], onDelete: Cascade)
  
  @@unique([plantId, symbioticPlantId])
  @@index([plantId])
  @@index([symbioticPlantId])
  @@index([relationshipType])
  @@index([confidence])
}

// ========================================
// AESTHETIC PLANT PAIRINGS
// ========================================

model PlantAestheticPairing {
  id                Int     @id @default(autoincrement())
  plantId           Int     @map("plant_id")
  companionPlantId  Int     @map("companion_plant_id")
  
  // V1 ESSENTIALS - Keep these for MVP
  pairingType       String  @map("pairing_type") // "color_harmony", "texture_contrast", "size_complement"
  aestheticReason   String  @map("aesthetic_reason") // Why these plants look good together
  containerSuitable Boolean @default(false) @map("container_suitable") // Can be planted in same container
  confidence        Float   @default(0.0) // 0-1 confidence score
  
  // PHASE 2+ FEATURES - Defer to later releases
  // Note: These fields add complexity without providing core MVP value
  // Uncomment when implementing advanced aesthetic recommendations
  // arrangementNotes  String? @map("arrangement_notes")
  // colorHarmony      String? @map("color_harmony")
  // textureContrast   String? @map("texture_contrast")
  // sizeRelationship  String? @map("size_relationship")
  // roomStyle         String[] @map("room_style")
  // lightingContext   String[] @map("lighting_context")
  // containerType     String[] @map("container_type")
  // designSource      String? @map("design_source")
  
  // Timestamps
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  
  // Relations
  plant             Plant   @relation("PlantAestheticPairings", fields: [plantId], references: [id], onDelete: Cascade)
  companionPlant    Plant   @relation("CompanionAestheticPairings", fields: [companionPlantId], references: [id], onDelete: Cascade)
  
  @@unique([plantId, companionPlantId])
  @@index([plantId])
  @@index([companionPlantId])
  @@index([pairingType])
  @@index([containerSuitable])
  @@index([confidence])
}

// ========================================
// PLANT HEALTH & DISEASE IDENTIFICATION
// ========================================

model PlantHealthIssue {
  id                String   @id @default(dbgenerated("gen_random_uuid()"))
  plantId           Int      @map("plant_id")
  
  // Issue identification
  issueType         HealthIssueType @map("issue_type")
  issueName         String   @map("issue_name") // "powdery_mildew", "aphid_infestation"
  severity          IssueSeverity @default(MILD)
  
  // Symptoms and diagnosis
  symptoms          String[] // Max 20 items. Validated in HealthIssueSchema
  description       String?
  causes            String[] // Max 15 items. Validated in HealthIssueSchema
  
  // Treatment and prevention
  prevention        String[] // Max 20 items. Prevention methods
  treatment         String[] // Max 25 items. Treatment options
  organicTreatment  String[] @map("organic_treatment") // Max 15 items. Organic treatment options
  chemicalTreatment String[] @map("chemical_treatment") // Max 15 items. Chemical treatment options
  
  // Visual identification
  visualCues        Json?    @map("visual_cues") // AI training data for visual identification
  // Example: {
  //   "leaf_spots": {
  //     "color": ["white", "gray"],
  //     "size": "small",
  //     "pattern": "powdery"
  //   }
  // }
  
  // AI confidence and sources
  aiConfidence      Float?   @map("ai_confidence")
  researchSource    String?  @map("research_source")
  
  // Timestamps
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  
  // Relations
  plant             Plant    @relation(fields: [plantId], references: [id], onDelete: Cascade)
  userReports       UserHealthReport[]
  
  @@index([plantId])
  @@index([issueType])
  @@index([severity])
  @@index([aiConfidence])
}

model UserHealthReport {
  id                String   @id @default(dbgenerated("gen_random_uuid()"))
  userId            String   @map("user_id")
  plantHealthIssueId String  @map("plant_health_issue_id")
  
  // User's plant context
  userPlantId       String?  @map("user_plant_id") // If from user's garden
  plantId           Int?     @map("plant_id")      // If from general identification
  
  // Report details
  images            String[] // URLs of uploaded images
  description       String?
  symptoms          String[] // User-reported symptoms
  location          String?  // Where the issue was observed
  environment       Json?    // Environmental conditions
  
  // AI analysis results
  aiDiagnosis       Json?    @map("ai_diagnosis")
  confidence        Float?   // AI confidence in diagnosis
  alternativeDiagnoses Json? @map("alternative_diagnoses")
  
  // Resolution tracking
  status            ReportStatus @default(OPEN)
  resolution        String?
  effectiveness     Float?   // How effective was the treatment (0-1)
  
  // Timestamps
  reportedAt        DateTime @default(now()) @map("reported_at")
  resolvedAt        DateTime? @map("resolved_at")
  
  // Relations
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  healthIssue       PlantHealthIssue @relation(fields: [plantHealthIssueId], references: [id], onDelete: Cascade)
  userPlant         UserPlant? @relation(fields: [userPlantId], references: [id], onDelete: SetNull)
  
  @@index([userId])
  @@index([plantHealthIssueId])
  @@index([userPlantId])
  @@index([status])
  @@index([reportedAt])
}

// ========================================
// ENHANCED USER DATA
// ========================================

model User {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  clerkId   String   @unique @map("clerk_id")
  email     String   @unique
  name      String?
  
  // Enhanced user profile
  profile   Json
  // Structure: UserProfile (types/user.ts)
  // Validation: UserProfileSchema (lib/schemas/user.ts)
  // Note: Empty object default handled in application code (Prisma doesn't support JSON defaults)
  // Example: {
  //   "experience": "beginner", // "beginner", "intermediate", "advanced", "expert"
  //   "gardeningGoals": ["food_production", "aesthetics", "wildlife"], // Max 10 items
  //   "availableTime": "weekends", // "daily", "weekends", "seasonal"
  //   "budget": "moderate" // "low", "moderate", "high"
  // }
  
  // User preferences and settings
  preferences Json
  // Structure: UserPreferences (types/user.ts)
  // Validation: UserPreferencesSchema (lib/schemas/user.ts)
  // Note: Empty object default handled in application code (Prisma doesn't support JSON defaults)
  // Example: {
  //   "notifications": {
  //     "care_reminders": true,
  //     "seasonal_tips": true,
  //     "plant_health_alerts": true,
  //     "new_features": false
  //   },
  //   "units": {
  //     "temperature": "fahrenheit",
  //     "measurement": "imperial",
  //     "time": "12_hour"
  //   },
  //   "privacy": {
  //     "share_data": false,
  //     "public_profile": false
  //   }
  // }
  
  // User statistics and achievements
  stats      Json
  // Structure: UserStats (types/user.ts)
  // Validation: UserStatsSchema (lib/schemas/user.ts)
  // Note: Empty object default handled in application code (Prisma doesn't support JSON defaults)
  // Example: {
  //   "plants_cared_for": 0,
  //   "care_logs_created": 0,
  //   "health_issues_resolved": 0,
  //   "gardens_created": 0,
  //   "streak_days": 0,
  //   "achievements": ["first_plant", "care_streak_7"] // Max 100 items
  // }
  
  // Soft delete support for GDPR compliance
  deletedAt DateTime? @map("deleted_at")
  
  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  lastActiveAt DateTime? @map("last_active_at")
  
  // Relations
  gardens   Garden[]
  plants    UserPlant[]
  healthReports UserHealthReport[]
  activities UserActivity[]
  careTasks UserCareTask[]
  plantIdentifications PlantIdentification[]
  identificationFeedback PlantIdentificationFeedback[]
  recommendations PlantRecommendation[]
  posts     CommunityPost[]
  responses CommunityResponse[]
  expertProfile ExpertProfile?
  
  @@index([clerkId])
  @@index([email])
  @@index([lastActiveAt])
  @@index([deletedAt]) // For filtering active users
}

model Garden {
  id          Int      @id @default(autoincrement())
  userId      String   @map("user_id")
  name        String
  description String?
  
  // Garden location and conditions
  location    Json
  // Structure: GardenLocation (types/garden.ts)
  // Validation: GardenLocationSchema (lib/schemas/garden.ts)
  // Note: Empty object default handled in application code (Prisma doesn't support JSON defaults)
  // Example: {
  //   "address": "123 Main St",
  //   "coordinates": {"lat": 35.7796, "lng": -78.6382},
  //   "zone": "7b",
  //   "region": "piedmont",
  //   "microclimate": "sheltered"
  // }
  
  // Garden characteristics
  conditions  Json
  // Structure: GardenConditions (types/garden.ts)
  // Validation: GardenConditionsSchema (lib/schemas/garden.ts)
  // Note: Empty object default handled in application code (Prisma doesn't support JSON defaults)
  // Example: {
  //   "light": ["full_sun", "partial_shade"], // Max 5 items
  //   "soil": ["clay", "loam"], // Max 3 items
  //   "drainage": "good",
  //   "ph": "neutral",
  //   "slope": "flat",
  //   "wind_exposure": "protected"
  // }
  
  // Garden preferences
  preferences Json
  // Structure: GardenPreferences (types/garden.ts)
  // Validation: GardenPreferencesSchema (lib/schemas/garden.ts)
  // Note: Empty object default handled in application code (Prisma doesn't support JSON defaults)
  // Example: {
  //   "wildlife": ["butterflies", "bees"], // Max 10 items
  //   "maintenance": "low",
  //   "style": ["native", "drought_tolerant"], // Max 5 items
  //   "goals": ["food_production", "aesthetics"], // Max 5 items
  //   "aestheticTheme": ["modern", "minimalist", "tropical"], // Max 3 items
  //   "colorPreferences": ["monochromatic", "complementary"], // Max 5 items
  //   "containerStyle": ["ceramic", "hanging", "terracotta"], // Max 5 items
  //   "arrangementStyle": ["statement_plant", "grouped_cluster", "vertical_layering"] // Max 3 items
  // }
  
  // Garden management
  management  Json
  // Structure: GardenManagement (types/garden.ts)
  // Validation: GardenManagementSchema (lib/schemas/garden.ts)
  // Note: Empty object default handled in application code (Prisma doesn't support JSON defaults)
  // Example: {
  //   "watering_system": "manual",
  //   "fertilizer_schedule": "monthly",
  //   "pest_management": "organic",
  //   "seasonal_tasks": ["spring_cleanup", "fall_prep"] // Max 10 items
  // }
  
  // Timestamps
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  plants      UserPlant[]
  recommendations PlantRecommendation[]
  
  @@index([userId])
  @@index([name])
  @@index([location], type: Gin)
  @@index([conditions], type: Gin)
  @@index([preferences], type: Gin)
}

model UserPlant {
  id          String   @id @default(dbgenerated("gen_random_uuid()"))
  userId      String   @map("user_id")
  gardenId    Int      @map("garden_id")
  plantId     Int      @map("plant_id")
  
  // User-specific plant data
  nickname    String?
  notes       String?
  location    String? // Specific location within garden
  
  // Plant status and health
  status      PlantStatus @default(HEALTHY)
  healthScore Int?        @map("health_score") // 0-100
  lastHealthCheck DateTime? @map("last_health_check")
  
  // Potting and container information
  currentPotSize String? @map("current_pot_size") // "small", "medium", "large", "extra_large"
  potMaterial    String? @map("pot_material") // "plastic", "ceramic", "terracotta", "fabric"
  drainageHoles  Boolean? @map("drainage_holes") @default(true)
  
  // Re-potting tracking
  lastRepottedAt DateTime? @map("last_repotted_at")
  nextRepotEstimate DateTime? @map("next_repot_estimate") // AI-calculated estimate
  
  // Care tracking
  careLogs    CareLog[]
  images      UserPlantImage[]
  healthReports UserHealthReport[]
  careTasks   UserCareTask[]
  communityPosts CommunityPost[]
  
  // Timestamps
  plantedAt   DateTime? @map("planted_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  garden      Garden   @relation(fields: [gardenId], references: [id], onDelete: Cascade)
  plant       Plant    @relation(fields: [plantId], references: [id], onDelete: Cascade)
  
  @@unique([userId, gardenId, plantId])
  @@index([userId])
  @@index([gardenId])
  @@index([plantId])
  @@index([status])
  @@index([healthScore])
  @@index([lastHealthCheck])
  @@index([lastRepottedAt])
  @@index([nextRepotEstimate])
  // Composite indexes for dashboard and garden queries
  @@index([userId, status, lastHealthCheck]) // For user dashboard: active plants sorted by health check
  @@index([gardenId, status]) // For garden health overview
}

model CareLog {
  id          String      @id @default(dbgenerated("gen_random_uuid()"))
  userPlantId String      @map("user_plant_id")
  
  // Care details
  type        CareLogType
  description String?
  notes       String?
  
  // Care timing
  performedAt DateTime    @map("performed_at")
  createdAt   DateTime    @default(now()) @map("created_at")
  
  // Media
  images      String[]    @default("{}")
  
  // Relations
  userPlant   UserPlant   @relation(fields: [userPlantId], references: [id], onDelete: Cascade)
  
  @@index([userPlantId])
  @@index([type])
  @@index([performedAt])
}

model UserPlantImage {
  id          String   @id @default(dbgenerated("gen_random_uuid()"))
  userPlantId String   @map("user_plant_id")
  
  url         String
  altText     String?  @map("alt_text")
  caption     String?
  isPrimary   Boolean  @default(false) @map("is_primary")
  sortOrder   Int      @default(0) @map("sort_order")
  
  // Image metadata for AI processing
  imageType   String?  @map("image_type") // "growth_progress", "health_check", "care_action"
  season      String?
  healthStatus String? @map("health_status")
  
  // Image metadata
  uploadedAt  DateTime @default(now()) @map("uploaded_at")
  
  // Relations
  userPlant   UserPlant @relation(fields: [userPlantId], references: [id], onDelete: Cascade)
  
  @@index([userPlantId])
  @@index([userPlantId, isPrimary])
  @@index([userPlantId, sortOrder])
  @@index([imageType])
  @@index([healthStatus])
}

// ========================================
// AUTOMATED CARE TASK SYSTEM
// ========================================

model PlantCareTask {
  id                Int      @id @default(autoincrement())
  plantId           Int      @map("plant_id")
  
  // Task details
  taskType          CareLogType @map("task_type")
  title             String
  description       String?
  priority          TaskPriority @default(MEDIUM)
  
  // Automated scheduling
  frequency         String   // "daily", "weekly", "monthly", "seasonal"
  season            String?  // "spring", "summer", "fall", "winter", null for all seasons
  conditions        Json?    // Environmental conditions that trigger the task
  
  // Task instructions
  instructions      Json
  // Note: Empty object default handled in application code (Prisma doesn't support JSON defaults)
  // Example: {
  //   "steps": [
  //     "Check soil moisture",
  //     "Water if top inch is dry",
  //     "Avoid getting leaves wet"
  //   ],
  //   "tools_needed": ["watering_can", "moisture_meter"],
  //   "time_estimate": "5_minutes",
  //   "difficulty": "easy"
  // }
  
  // AI-generated task
  aiGenerated       Boolean  @default(false) @map("ai_generated")
  aiConfidence      Float?   @map("ai_confidence")
  
  // Timestamps
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  
  // Relations
  plant             Plant    @relation(fields: [plantId], references: [id], onDelete: Cascade)
  userTasks         UserCareTask[]
  
  @@index([plantId])
  @@index([taskType])
  @@index([frequency])
  @@index([season])
  @@index([aiGenerated])
}

model UserCareTask {
  id                String   @id @default(dbgenerated("gen_random_uuid()"))
  userId            String   @map("user_id")
  userPlantId       String?  @map("user_plant_id") // null for general plant tasks
  plantCareTaskId   Int?     @map("plant_care_task_id") // null for custom tasks
  
  // Task details
  taskType          CareLogType @map("task_type")
  title             String
  description       String?
  priority          TaskPriority @default(MEDIUM)
  
  // Scheduling
  dueDate           DateTime @map("due_date")
  completedAt       DateTime? @map("completed_at")
  isCompleted       Boolean  @default(false) @map("is_completed")
  
  // Recurring task settings
  isRecurring       Boolean  @default(false) @map("is_recurring")
  recurringPattern  Json?    @map("recurring_pattern")
  
  // Custom task details (if not from PlantCareTask)
  customInstructions Json?   @map("custom_instructions")
  
  // Timestamps
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  
  // Relations
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userPlant         UserPlant? @relation(fields: [userPlantId], references: [id], onDelete: SetNull)
  plantCareTask     PlantCareTask? @relation(fields: [plantCareTaskId], references: [id], onDelete: SetNull)
  
  @@index([userId])
  @@index([userPlantId])
  @@index([dueDate])
  @@index([isCompleted])
  @@index([taskType])
  // Composite indexes for task management queries
  @@index([userId, dueDate]) // For user's upcoming tasks
  @@index([userId, isCompleted, dueDate]) // For filtering active tasks by due date
}

// ========================================
// PLANT RECOMMENDATIONS & AI
// ========================================

model PlantRecommendation {
  id          Int      @id @default(autoincrement())
  plantId     Int      @map("plant_id")
  gardenId    Int?     @map("garden_id") // null for general recommendations
  userId      String?  @map("user_id")   // null for general recommendations
  
  // Recommendation details
  reason      String
  score       Float    @default(0.0)
  category    RecommendationCategory
  
  // Recommendation context
  context     Json
  // Structure: RecommendationContext (types/recommendation.ts)
  // Validation: RecommendationContextSchema (lib/schemas/recommendation.ts)
  // Note: Empty object default handled in application code (Prisma doesn't support JSON defaults)
  // Example: {
  //   "gardenConditions": {
  //     "light": ["full_sun"], // Max 5 items
  //     "soil": ["clay"], // Max 3 items
  //     "zone": "7b"
  //   },
  //   "existingPlants": [1, 2, 3], // Max 50 items
  //   "symbioticBenefits": ["pest_control", "nutrient_fixation"], // Max 10 items
  //   "seasonalTiming": "spring",
  //   "userExperience": "beginner"
  // }
  
  // AI/ML metadata
  model       String?  // Which AI model generated this
  confidence  Float?   // Confidence score
  algorithm   String?  // Recommendation algorithm used
  
  // Timestamps
  createdAt   DateTime @default(now()) @map("created_at")
  expiresAt   DateTime? @map("expires_at")
  
  // Relations
  plant       Plant    @relation(fields: [plantId], references: [id], onDelete: Cascade)
  garden      Garden?  @relation(fields: [gardenId], references: [id], onDelete: Cascade)
  user        User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([plantId])
  @@index([gardenId])
  @@index([userId])
  @@index([score])
  @@index([category])
  @@index([createdAt])
  @@index([context], type: Gin)
}

// ========================================
// PLANT IDENTIFICATION SYSTEM
// ========================================

model PlantIdentification {
  id                String   @id @default(dbgenerated("gen_random_uuid()"))
  userId            String   @map("user_id")
  
  // Identification request details
  images            String[] // Max 10 images. URLs of uploaded images
  description       String?  // User's description of the plant
  location          String?  // Where the plant was found
  environment       Json?    // Environmental conditions
  // Structure: IdentificationEnvironment (types/identification.ts)
  // Validation: IdentificationEnvironmentSchema (lib/schemas/identification.ts)
  
  // AI analysis results
  aiAnalysis        Json     @map("ai_analysis")
  // Structure: PlantIdentificationAnalysis (types/identification.ts)
  // Validation: PlantIdentificationAnalysisSchema (lib/schemas/identification.ts)
  // Example: {
  //   "primaryMatch": {
  //     "plantId": 123,
  //     "confidence": 0.85,
  //     "scientificName": "Rosa damascena",
  //     "commonNames": ["Damask Rose"] // Max 5 items
  //   },
  //   "alternativeMatches": [ // Max 5 items
  //     {
  //       "plantId": 124,
  //       "confidence": 0.72,
  //       "scientificName": "Rosa gallica"
  //     }
  //   ],
  //   "visualFeatures": {
  //     "flowerColor": ["pink"], // Max 5 items
  //     "leafShape": "compound",
  //     "growthHabit": "shrub"
  //   }
  // }
  
  // User feedback and confirmation
  userConfirmed     Boolean  @default(false) @map("user_confirmed")
  confirmedPlantId  Int?     @map("confirmed_plant_id")
  userFeedback      String?  @map("user_feedback")
  
  // AI model information
  model             String   // AI model used for identification
  modelVersion      String?  @map("model_version")
  processingTime    Int?     @map("processing_time") // milliseconds
  
  // Status tracking
  status            IdentificationStatus @default(PENDING)
  
  // Timestamps
  submittedAt       DateTime @default(now()) @map("submitted_at")
  analyzedAt        DateTime? @map("analyzed_at")
  confirmedAt       DateTime? @map("confirmed_at")
  
  // Relations
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  confirmedPlant    Plant?   @relation(fields: [confirmedPlantId], references: [id], onDelete: SetNull)
  
  @@index([userId])
  @@index([status])
  @@index([submittedAt])
  @@index([confirmedPlantId])
  @@index([aiAnalysis], type: Gin)
}

model PlantIdentificationFeedback {
  id                    String   @id @default(dbgenerated("gen_random_uuid()"))
  plantIdentificationId String   @map("plant_identification_id")
  userId                String   @map("user_id")
  
  // Feedback details
  feedbackType          FeedbackType @map("feedback_type")
  isCorrect             Boolean? @map("is_correct")
  correctPlantId        Int?     @map("correct_plant_id")
  comments              String?
  
  // Learning data for AI improvement
  learningData          Json?    @map("learning_data")
  // Example: {
  //   "misidentifiedFeatures": ["flower_shape", "leaf_texture"],
  //   "correctFeatures": ["growth_habit", "overall_size"],
  //   "imageQuality": "good",
  //   "lighting": "natural"
  // }
  
  // Timestamps
  createdAt             DateTime @default(now()) @map("created_at")
  
  // Relations
  plantIdentification   PlantIdentification @relation(fields: [plantIdentificationId], references: [id], onDelete: Cascade)
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  correctPlant          Plant?   @relation(fields: [correctPlantId], references: [id], onDelete: SetNull)
  
  @@index([plantIdentificationId])
  @@index([userId])
  @@index([feedbackType])
  @@index([createdAt])
}

// ========================================
// SEARCH & EMBEDDINGS
// ========================================

model PlantEmbedding {
  id          String   @id @default(dbgenerated("gen_random_uuid()"))
  plantId     Int      @map("plant_id")
  
  // Embedding data
  content     String   // Text that was embedded
  embedding   Unsupported("vector") // pgvector
  
  // Metadata
  model       String   // Which embedding model
  createdAt   DateTime @default(now()) @map("created_at")
  
  // Relations
  plant       Plant    @relation(fields: [plantId], references: [id], onDelete: Cascade)
  
  @@index([plantId])
  @@index([embedding], type: Hnsw, m: 16, ef_construction: 64)
}

model SearchCache {
  id          String   @id @default(dbgenerated("gen_random_uuid()"))
  query       String   @unique
  results     Json     // Cached search results
  filters     Json?    // Applied filters
  
  // Cache metadata
  createdAt   DateTime @default(now()) @map("created_at")
  expiresAt   DateTime @map("expires_at")
  hitCount    Int      @default(0) @map("hit_count")
  
  @@index([query])
  @@index([expiresAt])
}

// ========================================
// CONTENT MANAGEMENT
// ========================================

model Tip {
  id          Int      @id @default(autoincrement())
  slug        String   @unique
  
  // Content
  title       String
  description String?
  content     Json     // Rich content (Portable Text)
  
  // Metadata
  authorId    String   @map("author_id")
  category    String?
  tags        String[] @default("{}")
  
  // Media
  featuredImage String? @map("featured_image")
  
  // Engagement
  views       Int      @default(0)
  likes       Int      @default(0)
  
  // Publishing
  isPublished Boolean  @default(false) @map("is_published")
  publishedAt DateTime? @map("published_at")
  
  // Timestamps
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  @@index([slug])
  @@index([isPublished])
  @@index([publishedAt])
  @@index([category])
  @@index([tags], type: Gin)
}

// ========================================
// SOCIAL LAYER - COMMUNITY Q&A
// ========================================

model CommunityPost {
  id          String   @id @default(dbgenerated("gen_random_uuid()"))
  userId      String   @map("user_id")
  
  // Post content
  title       String
  content     String
  category    PostCategory
  tags        String[] @default("{}")
  
  // Plant context (optional)
  plantId     Int?     @map("plant_id") // If related to specific plant
  userPlantId String?  @map("user_plant_id") // If from user's garden
  
  // AI response
  aiResponse  String?  @map("ai_response") // Instant AI-generated answer
  aiConfidence Float?  @map("ai_confidence") // AI confidence in response
  
  // Community engagement
  isOpenToCommunity Boolean @default(false) @map("is_open_to_community")
  responseCount     Int     @default(0) @map("response_count")
  upvotes          Int     @default(0)
  views            Int     @default(0)
  
  // Status and moderation
  status      PostStatus @default(ACTIVE)
  isResolved  Boolean    @default(false) @map("is_resolved")
  resolvedAt  DateTime?  @map("resolved_at")
  
  // Media
  images      String[]   @default("{}")
  
  // Timestamps
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  
  // Relations
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  plant       Plant?     @relation(fields: [plantId], references: [id], onDelete: SetNull)
  userPlant   UserPlant? @relation(fields: [userPlantId], references: [id], onDelete: SetNull)
  responses   CommunityResponse[]
  
  @@index([userId])
  @@index([category])
  @@index([status])
  @@index([isOpenToCommunity])
  @@index([createdAt])
  @@index([tags], type: Gin)
  // Composite indexes for community browsing
  @@index([createdAt, upvotes]) // For "hot" sorting by recency and popularity
  @@index([category, createdAt]) // For browsing posts by category
}

model CommunityResponse {
  id          String   @id @default(dbgenerated("gen_random_uuid()"))
  postId      String   @map("post_id")
  userId      String   @map("user_id")
  
  // Response content
  content     String
  isExpertResponse Boolean @default(false) @map("is_expert_response")
  
  // Expert verification
  expertVerified Boolean @default(false) @map("expert_verified")
  verificationSource String? @map("verification_source") // "certification", "experience", "education"
  
  // Community feedback
  upvotes     Int      @default(0)
  downvotes   Int      @default(0)
  isAccepted  Boolean  @default(false) @map("is_accepted") // Marked as best answer
  
  // PHASE 2+ MONETIZATION - Keep fields but defer implementation
  // Note: Expert monetization adds complexity; focus on Q&A quality first
  tipAmount   Float?   @map("tip_amount") // PHASE 2+: Tip from original poster
  platformMatch Float? @map("platform_match") // PHASE 2+: Platform's matching tip
  
  // Media
  images      String[] @default("{}")
  
  // Timestamps
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  // Relations
  post        CommunityPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([postId])
  @@index([userId])
  @@index([isExpertResponse])
  @@index([expertVerified])
  @@index([createdAt])
}

model ExpertProfile {
  id          String   @id @default(dbgenerated("gen_random_uuid()"))
  userId      String   @unique @map("user_id")
  
  // Expert credentials
  bio         String?
  specialties String[] @default("{}") // ["houseplants", "outdoor_gardening", "plant_health"]
  certifications String[] @default("{}") // ["master_gardener", "horticulture_degree"]
  experience  String? // Years of experience
  
  // Verification status
  isVerified  Boolean  @default(false) @map("is_verified")
  verificationLevel String? @map("verification_level") // "basic", "certified", "professional"
  verificationDate DateTime? @map("verification_date")
  
  // Performance metrics
  totalResponses Int @default(0) @map("total_responses")
  acceptedAnswers Int @default(0) @map("accepted_answers")
  totalEarnings Float @default(0.0) @map("total_earnings") // PHASE 2+: Monetization metrics
  averageRating Float @default(0.0) @map("average_rating")
  
  // Availability
  isAvailable Boolean @default(true) @map("is_available")
  responseTime String? @map("response_time") // "within_hour", "within_day", "within_week"
  
  // Timestamps
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([isVerified])
  @@index([specialties], type: Gin)
  @@index([isAvailable])
}

// ========================================
// SECURITY & AUDIT
// ========================================

model AuditLog {
  id          String   @id @default(dbgenerated("gen_random_uuid()"))
  userId      String?  @map("user_id") // Null for system actions
  
  // Action details
  action      String   // "create", "update", "delete", "export", "access"
  tableName   String   @map("table_name")
  recordId    String   @map("record_id")
  changes     Json?    // Before/after for updates
  // Structure: AuditLogChanges (types/audit.ts)
  // Validation: AuditLogChangesSchema (lib/schemas/audit.ts)
  // Example: {
  //   "before": {"status": "active"},
  //   "after": {"status": "deleted"}
  // }
  
  // Request metadata for security tracking
  ipAddress   String?  @map("ip_address")
  userAgent   String?  @map("user_agent")
  
  // Timestamp
  timestamp   DateTime @default(now())
  
  @@index([userId]) // For user activity tracking
  @@index([tableName, recordId]) // For record history
  @@index([timestamp]) // For time-based queries
  @@index([action]) // For action type filtering
}

// ========================================
// ANALYTICS & TRACKING
// ========================================

model UserActivity {
  id          String   @id @default(dbgenerated("gen_random_uuid()"))
  userId      String   @map("user_id")
  
  // Activity details
  action      String   // "plant_added", "garden_created", "health_report_submitted"
  resourceType String  @map("resource_type") // "plant", "garden", "health_report"
  resourceId  String?  @map("resource_id")
  
  // Additional data
  metadata    Json?
  // Note: Nullable JSON field; empty object default handled in application code (Prisma doesn't support JSON defaults)
  
  // Timestamps
  createdAt   DateTime @default(now()) @map("created_at")
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([action])
  @@index([resourceType])
  @@index([createdAt])
}

model PlantView {
  id          String   @id @default(dbgenerated("gen_random_uuid()"))
  plantId     Int      @map("plant_id")
  userId      String?  @map("user_id") // null for anonymous views
  
  // View details
  source      String?  // "search", "recommendation", "direct", "health_identification"
  duration    Int?     // View duration in seconds
  
  // Timestamps
  viewedAt    DateTime @default(now()) @map("viewed_at")
  
  @@index([plantId])
  @@index([userId])
  @@index([viewedAt])
}

// ========================================
// ENUMS
// ========================================

enum PlantStatus {
  HEALTHY
  WARNING
  CRITICAL
  DORMANT
  DEAD
}

enum CareLogType {
  WATER
  FERTILIZE
  PRUNE
  REPOT
  TREATMENT
  OBSERVATION
  PHOTO
  HEALTH_CHECK
  PEST_CONTROL
  DISEASE_TREATMENT
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum RecommendationCategory {
  SIMILAR_PLANTS
  GARDEN_COMPANIONS
  SEASONAL_SUGGESTIONS
  CARE_REMINDERS
  REPLACEMENT_SUGGESTIONS
  SYMBIOTIC_PLANTS
  HEALTH_IMPROVEMENTS
}

enum SymbiosisType {
  MUTUALISTIC    // Both plants benefit
  COMMENSALISTIC // One benefits, other unaffected
  PROTECTIVE     // One protects the other
  NUTRITIVE      // One provides nutrients to the other
  SPACE_SHARING  // Complementary space usage
  PEST_CONTROL   // One repels pests for the other
  AESTHETIC      // Plants that look great together visually
}

enum HealthIssueType {
  DISEASE
  PEST
  NUTRITIONAL
  ENVIRONMENTAL
  PHYSICAL_DAMAGE
  ROOT_ISSUE
  LEAF_ISSUE
  FLOWER_ISSUE
  FRUIT_ISSUE
}

enum IssueSeverity {
  MILD
  MODERATE
  SEVERE
  CRITICAL
}

enum ReportStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum IdentificationStatus {
  PENDING
  ANALYZING
  COMPLETED
  FAILED
  USER_CONFIRMED
  USER_REJECTED
}

enum FeedbackType {
  CORRECT_IDENTIFICATION
  INCORRECT_IDENTIFICATION
  PARTIAL_MATCH
  NO_MATCH
  IMAGE_QUALITY_ISSUE
  MODEL_IMPROVEMENT
}

enum PostCategory {
  PLANT_CARE
  PLANT_IDENTIFICATION
  PLANT_HEALTH
  GARDEN_DESIGN
  PLANT_RECOMMENDATIONS
  GENERAL_QUESTION
  SUCCESS_STORY
  TROUBLESHOOTING
}

enum PostStatus {
  ACTIVE
  CLOSED
  ARCHIVED
  MODERATED
  DELETED
}

